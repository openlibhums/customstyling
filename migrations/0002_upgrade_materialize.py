# Generated by Django 3.2.19 on 2023-06-05 15:33

import os
import sys
import difflib

from django.db import migrations
from django.conf import settings
from plugins.customstyling import plugin_settings

from utils.logger import get_logger
logger = get_logger(__name__)


def change_old_to_new_css_selectors(file_paths, reverse=False):
    """
    Modifies custom stylesheets so that they
    use the new selectors in v1 and later of Materialize CSS.
    See https://github.com/Dogfalo/materialize/blob/v1-dev/v1-upgrade-guide.md
    """
    changes_to_make = [
        ('dropdown-button', 'dropdown-trigger'),
        ('button-collapse', 'sidenav-trigger'),
        ('side-nav', 'sidenav'),
        ('data-activates', 'data-target'),
    ]

    for file_path in file_paths:
        try:
            css = []
            new_css = []
            with open(file_path, 'r', encoding="utf-8") as file_ref:
                css = file_ref.readlines()
                for line in css:
                    for change in changes_to_make:
                        if reverse:
                            new, old = change
                        else:
                            old, new = change
                        line = line.replace(old, new)
                    new_css.append(line)
            if css != new_css:
                backup_file_folder = os.path.join(
                    os.path.dirname(file_path),
                    'temp',
                )
                if not os.path.exists(backup_file_folder):
                    os.mkdir(backup_file_folder)
                backup_file_path = os.path.join(
                    backup_file_folder,
                    os.path.basename(file_path),
                )
                with open(backup_file_path, 'w', encoding="utf-8") as file_ref:
                    file_ref.writelines(css)
                logger.info(f'Original backed up to {backup_file_path}')

                with open(file_path, 'w', encoding="utf-8") as file_ref:
                    file_ref.writelines(new_css)
                logger.info(f'Stylesheet modified at {file_path}')
                diff = difflib.unified_diff(css, new_css)
                sys.stdout.writelines(diff)
            else:
                pass
                # logger.info(f'No changes needed at {file_path}')

        except FileNotFoundError:
            pass
            # logger.info(f'No sheet found at {file_path}')


def find_and_handle_custom_stylesheets(apps, schema_editor, reverse=False):
    Journal = apps.get_model(
        'journal',
        'Journal',
    )
    Press = apps.get_model(
        'press',
        'Press',
    )
    SettingValue = apps.get_model(
        'core',
        'SettingValue',
    )
    CrossJournalStylesheet = apps.get_model(
        'customstyling',
        'CrossJournalStylesheet',
    )

    # logger.info('Checking custom journal stylesheets')
    for journal in Journal.objects.all():
        journal_id = journal.id
        try:
            theme = SettingValue.objects.get(
                setting__group__name='general',
                setting__name='journal_theme',
                journal__id=journal_id,
            )
        except SettingValue.DoesNotExist:
            continue
        if theme.value == 'material':
            stylesheet_paths = [
                os.path.join(
                    settings.BASE_DIR,
                    'static',
                    'material',
                    'css',
                    f'journal{journal_id}_override.css',
                ),
                os.path.join(
                    plugin_settings.BASE_CSS_PATH,
                    str(journal_id),
                    'custom.css',
                )
            ]

            for sheet in CrossJournalStylesheet.objects.filter(
                journals=journal,
            ):
                stylesheet_paths.append(
                    os.path.join(
                        plugin_settings.BASE_CSS_PATH,
                        'press',
                        sheet.stylesheet_name,
                    )
                )

            change_old_to_new_css_selectors(stylesheet_paths, reverse=reverse)

    # logger.info('Checking custom press stylesheets')
    press = Press.objects.first()
    if press.theme == 'material':
        stylesheet_paths = [
            os.path.join(
                settings.BASE_DIR,
                'static',
                'material',
                'css',
                'press_override.css',
            ),
            os.path.join(
                plugin_settings.BASE_CSS_PATH,
                'press',
                'custom.css',
            )
        ]

        change_old_to_new_css_selectors(stylesheet_paths, reverse=reverse)


def handle_in_reverse(apps, schema_editor):
    find_and_handle_custom_stylesheets(apps, schema_editor, reverse=True)


class Migration(migrations.Migration):

    dependencies = [
        ('customstyling', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            find_and_handle_custom_stylesheets,
            reverse_code=handle_in_reverse,
        )
    ]
